apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

Properties configProp = new Properties()
configProp.load(new FileInputStream(file("$rootDir/config.properties")))
def gitHash = "git rev-parse HEAD".execute().text.trim()
def buildTime = new Date().format("yyyy-MM-dd' 'HH:mm:ss")
android {
    ndkVersion "21.4.7075529"
    compileSdkVersion "${rootProject.ext.android.compileSdkVersion}" as Integer
    buildToolsVersion "${rootProject.ext.android.buildToolsVersion}"
    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion as Integer
        targetSdkVersion rootProject.ext.android.targetSdkVersion as Integer
        applicationId rootProject.ext.android.applicationId
        versionName rootProject.ext.android.versionName
        versionCode rootProject.ext.android.versionCode as Integer
        ndk {
//            abiFilters "arm64-v8a"
//            "armeabi-v7a"
//            , "x86"
        }
        multiDexEnabled true

        manifestPlaceholders = rootProject.ext.manifestPlaceholders
        buildConfigField "String", "GIT_HASH", "\"${gitHash}\""
        buildConfigField "boolean", "APP_DEVELOP", "${rootProject.ext.dependVersion.appDevelop}"
        buildConfigField "String", "GOOGLE_REWARD_ID", "\"${rootProject.ext.dependVersion.googleRewardId}\""
        buildConfigField "String", "GOOGLE_BANNER_ID", "\"${rootProject.ext.dependVersion.googleBannerId}\""
        buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""
    }

    signingConfigs {
        release {
            keyAlias configProp['keystore.keyAlias']
            keyPassword configProp['keystore.keyPassword']
            storeFile file(configProp['keystore.storeFile'])
            storePassword configProp['keystore.storePassword']
            // 使用旧版签名，禁用V2版签名模式
            v2SigningEnabled false
        }
    }
    android {
        compileOptions {
            sourceCompatibility 1.8
            targetCompatibility 1.8
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.release
//            minifyEnabled true
//            shrinkResources true
//            zipAlignEnabled true
//            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            if (variant.buildType == "release") {
                outputFileName = "bb" + "_release_time_" + releaseTime() + ".apk"
            }
            if (variant.buildType == "debug") {
                outputFileName = "bb" + "_debug_time_" + releaseTime() + ".apk"
            }
        }
    }
    sourceSets {
        main {
            if ("${rootProject.ext.dependVersion.appLanguage}" == "tw") {
                assets.srcDirs = ['src/main/assets_tw']
                res.srcDirs = ['src/main/res_tw']
            } else if ("${rootProject.ext.dependVersion.appLanguage}" == "sin") {
                assets.srcDirs = ['src/main/assets_sin']
                res.srcDirs = ['src/main/res_sin']
            } else {
                assets.srcDirs = ['src/main/assets']
                res.srcDirs = ['src/main/res']
            }
            if ("${rootProject.ext.dependVersion.appDevelop}" == "true") {
                assets.srcDirs = assets.getSrcDirs() + ['src/main/assets_type']
                res.srcDirs = res.getSrcDirs() + ['src/main/res_type']
            }
            println "dirs=" + res.getSrcDirs() + ":" + assets.getSrcDirs() + ",appDevelop=${rootProject.ext.dependVersion.appDevelop}" + ",appLanguage=${rootProject.ext.dependVersion.appLanguage}"
        }
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/proguard/androidx-annotations.pro'
    }
}

def releaseTime() {
    return new Date().format("yyyyMMddHHmmss")
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    api "org.jetbrains.kotlin:kotlin-stdlib:${rootProject.ext.kotlin_version}"
    api "com.github.bumptech.glide:glide:4.12.0"
    api "androidx.recyclerview:recyclerview:1.2.1"
    implementation 'com.arthenica:smart-exception-java:0.1.1'
//    implementation 'androidx.cardview:cardview:1.0.0'
    implementation platform('com.google.firebase:firebase-bom:29.1.0')
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.android.gms:play-services-ads:20.5.0'
//    api('com.salton123:qa:1.0.0.0-SNAPSHOT')
//    api 'com.arthenica:ffmpeg-kit-min-gpl:4.5.1.LTS'
//    implementation(name:'ffmpeg-kit-release', ext:'aar')
}
